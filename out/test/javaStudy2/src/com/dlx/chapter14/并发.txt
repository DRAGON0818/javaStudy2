14.1
a.线程和进程的本质区别?线程有自己的一整套变量，而线程共享数据。
b.Thread.sleep()用于暂停当前活动

14.1.1 实现线程的方法
1.继承Thread类
2.实现Runnable接口中的run方法
注：直接调用Thread类或者Runnable对象的run方法，只会执行同一个线程中的任务。调用Thread.start方法，将创建一个执行run方法的新线程

14.2  中断线程
中断，其实指的就是程序在执行过程中，发生了某些非正常的事件指示当前进程不能继续执行了，应当得到暂停或终止，而通知正在执行的进程暂停执行的这个操作就叫『中断』。
中断操作主要分为两种方式，一种叫『抢占式中断』，一种叫『主动式中断』。前者就是在发生中断时，强制剥夺线程的 CPU，
后者是在正在执行的线程中断位上标记一下，具体什么时候中断由线程自己来决定。

一个 WAITING 状态的线程被中断为什么要抛出一个异常？
其实还是那个理念，「任何线程都没有权利终止另一个线程的生命」，一个正在 WAITING 中的线程由于不具有 CPU 的使用权，你中断它，它永远都不会知道自己被中断了直到自己重新竞争到了锁并得到运行。
那么，我们的主线程在调用 interrupt 方法中断一个线程，当发现它的状态为 WAITING 时，将唤醒它并更改指令寄存器的值以指向异常代码块，期待你自己来处理这个中断。
这也是为什么 wait、sleep、join 这些方法必须处理一个受检查的异常 InterruptException 的原因，因为这些方法会阻塞线程，而如果在阻塞期间收到中断，你也应当提供中断的处理逻辑。