9.1 集合框架 Java集合类库将“接口”和“实现”分离。

9.2  具体的集合
9.2.1 链表LinkList
9.2.2 数组列表 ArrayList
9.2.3 散列表 HashSet 【java中，散列表用链表数组实现，被称作”桶“，毕设用到的就是这个结构】，如果超过了填装因子，就需要对表进行再散列，创建一个桶数更多的表，把所有的元素装入到这个表中。
9.2.4 树集 TreeSet 元素必须实现Comparable接口，或者构造时，提供一个Comparator比较器。最常见的就是红黑树
9.2.5 队列/双端队列 Queue/Deque
9.2.6 优先队列 PriorityQueue:只能保证优先级最高的值在根部，其余元素不进行排序


9.3 映射 Map<K,V>
9.3.1 映射的通用实现：HashMap<K,V>和TreeMap<K,V>
9.3.2 更新映射项的特殊情况“键第一次出现”，方法1.使用getOrDefault();2.putIfAbsent(key,default);3.merge(key,v,BiFunction)
9.3.3 映射视图：可以从映射得到三种视图  键集 Set<K> ketSet()  值集 Collection<V> values()    条目集 Set<Map.Entry<K,V>> entrySet();
9.3.4 弱散列映射 主要解决问题是GC跟踪活动对象：只要映射对象是活动的，所有的桶也都是活动的，无法被活动。解决方案：弱散列映射，在内部维护了需要被回收的桶的队列
9.3.5 链接散列集和映射 LinkedHashMap/LinkedHashSet
9.3.6 枚举集合映射 EnumSet，内部用位序列实现（如果对应的值在集中，则相应的位被置为1）；EnumMap 是一个以键值为枚举对象的类。所以在构造的时候需要指定键的类型。new EnumMap<>(Class.class);
9.3.7 标识散列映射 IdentityHashMap中键的散列值，不是根据hashCode函数计算，而是System.identityHashCode方法计算。所以IdentityHashMap对象比较不用equals，直接使用==


9.4 视图和包装器
9.4.1 轻量级集合包装器
9.4.2 子范围
9.4.3 不可修改的视图 unmodifiable views
9.4.4 同步视图 例如Collections.synchronizedMap(new HashMap<String,Employee>());可以获得一个具有同步访问方法的对象
9.4.5 受查视图 例如Collections.checkedList(strings,String.class);返回一个受查视图，可以检测插入的对象是否属于给定的类，提前报错。



9.5
