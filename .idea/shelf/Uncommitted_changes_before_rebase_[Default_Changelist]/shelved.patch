Index: src/com/dlx/chapter14/threadPool/MatchCounter.java
===================================================================
--- src/com/dlx/chapter14/threadPool/MatchCounter.java	(revision 72bbfb31e87f317b90f201b86846193c12342c00)
+++ src/com/dlx/chapter14/threadPool/MatchCounter.java	(revision 72bbfb31e87f317b90f201b86846193c12342c00)
@@ -1,76 +0,0 @@
-package com.dlx.chapter14.ThreadPool;
-
-import java.io.File;
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Scanner;
-import java.util.concurrent.Callable;
-import java.util.concurrent.ExecutionException;
-import java.util.concurrent.ExecutorService;
-import java.util.concurrent.Future;
-
-public class MatchCounter implements Callable<Integer> {
-    private File directory;
-    private String keyword;
-    private ExecutorService pool;
-    private int count;
-
-
-    public MatchCounter(File directory, String keyword, ExecutorService pool) {
-        this.directory = directory;
-        this.keyword = keyword;
-        this.pool = pool;
-    }
-
-    @Override
-    public Integer call() throws Exception {
-
-        count=0;
-        try {
-            File[] files = directory.listFiles();
-            List<Future<Integer>> results = new ArrayList<>();
-
-            for (File file : files) {
-                if (file.isDirectory()) {
-                    MatchCounter counter = new MatchCounter(file, keyword, pool);
-                    Future<Integer> result = pool.submit(counter);
-                    results.add(result);
-                } else {
-                    if (serach(file)) {
-                        count++;
-                    }
-                }
-            }
-
-            for (Future<Integer> result : results) {
-                try {
-                    count += result.get();
-                } catch (ExecutionException e) {
-                    e.printStackTrace();
-                }
-            }
-        } catch (InterruptedException e) {
-
-        }
-        return count;
-    }
-
-    public boolean serach(File file) {
-        System.out.println("123");
-        try {
-            try (Scanner in = new Scanner(file,"UTF-8")) {
-                boolean found = false;
-                while (!found && in.hasNext()) {
-                    String line = in.nextLine();
-                    if (line.contains(keyword))
-                        found = true;
-                }
-                return found;
-            }
-        } catch (IOException e) {
-            return false;
-        }
-
-    }
-}
Index: src/com/dlx/chapter14/threadPool/ThreadPoolTest.java
===================================================================
--- src/com/dlx/chapter14/threadPool/ThreadPoolTest.java	(revision 72bbfb31e87f317b90f201b86846193c12342c00)
+++ src/com/dlx/chapter14/threadPool/ThreadPoolTest.java	(revision 72bbfb31e87f317b90f201b86846193c12342c00)
@@ -1,32 +0,0 @@
-package com.dlx.chapter14.ThreadPool;
-
-import java.io.File;
-import java.util.Scanner;
-import java.util.concurrent.*;
-
-public class ThreadPoolTest {
-    public static void main(String[] args) {
-        try (Scanner in = new Scanner(System.in)) {
-            System.out.println("enter base directory:");
-            String directory = in.nextLine();
-            System.out.println("Enter keyword");
-            String keyword = in.nextLine();
-
-            ExecutorService executorService = Executors.newCachedThreadPool();
-
-            MatchCounter counter = new MatchCounter(new File(directory), keyword, executorService);
-            Future<Integer> result = executorService.submit(counter);
-
-            try {
-                System.out.println(result.get() + " matching files");
-            } catch (ExecutionException e) {
-                e.printStackTrace();
-            } catch (InterruptedException e) {
-
-            }
-            executorService.shutdown();
-
-            System.out.println("largest pool size:"+((ThreadPoolExecutor)executorService).getLargestPoolSize());
-        }
-    }
-}
